syntax = "proto3";

package catalog_messages;

import "common/status.proto";
import "google/protobuf/timestamp.proto";
import "nats/options.proto";

// Category CRUD Messages
message CreateCategoryRequest {
    string name = 1;
    string slug = 2;
    string short_description = 3;
    optional string full_description = 4;
    optional string parent_id = 5;
    int32 display_order = 6;
    optional CategorySeo seo = 7;
    optional bool is_active = 8;
    optional string parent_slug = 9; // Alternative to parent_id for easier imports
}

message GetCategoryRequest {
    string id = 1;
}

message GetCategoryResponse {
    optional CategoryResponse category = 1;
    common.Status status = 2;
}

message GetCategoryBySlugRequest {
    string slug = 1;
}

message GetCategoryBySlugResponse {
    optional CategoryResponse category = 1;
    common.Status status = 2;
}

message UpdateCategoryRequest {
    string id = 1;
    optional string name = 2;
    optional string slug = 3;
    optional string short_description = 4;
    optional string full_description = 5;
    optional int32 display_order = 6;
    optional CategorySeo seo = 7;
    optional bool is_active = 8;
}

message DeleteCategoryRequest {
    string id = 1;
}

message CategoryResponse {
    string id = 1;
    string slug = 2;
    string name = 3;
    string short_description = 4;
    optional string full_description = 5;
    string path = 6;
    repeated string ancestors = 7;
    optional string parent_id = 8;
    int32 level = 9;
    int32 children_count = 10;
    int32 product_count = 11;
    bool is_active = 12;
    int32 display_order = 13;
    CategorySeo seo = 14;
    google.protobuf.Timestamp created_at = 15;
    google.protobuf.Timestamp updated_at = 16;
}

message CategorySeo {
    optional string meta_title = 1;
    optional string meta_description = 2;
    repeated string keywords = 3;
}

// Tree Operations
message CategoryTreeRequest {
    optional int32 max_depth = 1;
    optional bool include_inactive = 2;
    optional bool rebuild_cache = 3; // Force rebuild the tree cache
}

message CategoryTreeResponse {
    repeated CategoryTreeNode tree = 1;
    common.Status status = 2;
}

message CategoryTreeNode {
    string id = 1;
    string name = 2;
    string slug = 3;
    int32 level = 4;
    int32 product_count = 5;
    repeated CategoryTreeNode children = 6;
    string path = 7;
}

// Hierarchy Operations
message GetChildrenRequest {
    string parent_id = 1;
}

message GetChildrenResponse {
    repeated CategoryResponse children = 1;
    common.Status status = 2;
}

message GetDescendantsRequest {
    string ancestor_id = 1;
}

message GetDescendantsResponse {
    repeated CategoryResponse descendants = 1;
    common.Status status = 2;
}

message MoveCategoryRequest {
    string category_id = 1;
    optional string new_parent_id = 2;
}

message GetCategoryPathRequest {
    string category_id = 1;
}

message CategoryPathResponse {
    repeated CategoryResponse path = 1;
    common.Status status = 2;
}

// Import/Export Operations
message CategoryExportRequest {
    optional int32 batch_size = 1;
    optional int32 offset = 2;
}

message CategoryExportResponse {
    repeated CategoryResponse categories = 1;
    common.Status status = 2;
}

message CategoryImportRequest {
    repeated CreateCategoryRequest categories = 1;
    bool dry_run = 2;
}

message CategoryImportResponse {
    int32 successful_imports = 1;
    int32 failed_imports = 2;
    int32 total_processed = 3;
    repeated string errors = 4;
    common.Status status = 5;
}

// Utility Operations
message ReorderChildrenRequest {
    string parent_id = 1;
    repeated string ordered_ids = 2;
}

// Category Service Definition
service CategoryService {
    option (nats.options.queue) = "catalog-queue";
    option (nats.options.subject_prefix) = "catalog";
    option (nats.options.metadata) = {
        display_name: "Category Service"
        description: "Manages hierarchical product categories with SEO support"
        version: "1.0.0"
    };
    
    // Category CRUD operations
    rpc CreateCategory(CreateCategoryRequest) returns (CategoryResponse) {
        option (nats.options.subject) = "create_category";
    }
    
    rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse) {
        option (nats.options.subject) = "get_category";
    }
    
    rpc GetCategoryBySlug(GetCategoryBySlugRequest) returns (GetCategoryBySlugResponse) {
        option (nats.options.subject) = "get_category_by_slug";
    }
    
    rpc UpdateCategory(UpdateCategoryRequest) returns (CategoryResponse) {
        option (nats.options.subject) = "update_category";
    }
    
    rpc DeleteCategory(DeleteCategoryRequest) returns (common.Status) {
        option (nats.options.subject) = "delete_category";
    }
    
    // Tree operations
    rpc GetCategoryTree(CategoryTreeRequest) returns (CategoryTreeResponse) {
        option (nats.options.subject) = "get_category_tree";
        option (nats.options.timeout_ms) = 10000;  // Longer timeout for tree building
    }
    
    // Hierarchy operations
    rpc GetChildren(GetChildrenRequest) returns (GetChildrenResponse) {
        option (nats.options.subject) = "get_children";
    }
    
    rpc GetDescendants(GetDescendantsRequest) returns (GetDescendantsResponse) {
        option (nats.options.subject) = "get_descendants";
    }
    
    rpc MoveCategory(MoveCategoryRequest) returns (common.Status) {
        option (nats.options.subject) = "move_category";
    }
    
    rpc GetCategoryPath(GetCategoryPathRequest) returns (CategoryPathResponse) {
        option (nats.options.subject) = "get_category_path";
    }
    
    // Import/Export operations
    rpc ExportCategories(CategoryExportRequest) returns (CategoryExportResponse) {
        option (nats.options.subject) = "export_categories";
        option (nats.options.timeout_ms) = 30000;  // Longer timeout for export
    }
    
    rpc ImportCategories(CategoryImportRequest) returns (CategoryImportResponse) {
        option (nats.options.subject) = "import_categories";
        option (nats.options.timeout_ms) = 60000;  // Longer timeout for import
    }
    
    // Utility operations
    rpc ReorderChildren(ReorderChildrenRequest) returns (common.Status) {
        option (nats.options.subject) = "reorder_children";
    }
}
