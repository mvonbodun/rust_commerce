name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_ENV: ci

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate manifest casing and location
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          # Ensure the canonical manifest exists at the repo root
          if [ ! -f Cargo.toml ]; then
            echo "ERROR: Cargo.toml not found at repository root ($GITHUB_WORKSPACE)." >&2
            exit 1
          fi
          # Fail fast if any lowercase cargo.toml sneaks in (case-sensitive on Linux runners)
          LOWER=$(find . -type f -iname 'cargo.toml' ! -name 'Cargo.toml' || true)
          if [ -n "$LOWER" ]; then
            echo "ERROR: Found non-canonical manifest filenames (expected 'Cargo.toml'):" >&2
            echo "$LOWER" >&2
            echo "Hint: rename with 'git mv -f cargo.toml Cargo.toml' and commit the change." >&2
            exit 1
          fi
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --all --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate manifest casing and location
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          if [ ! -f Cargo.toml ]; then
            echo "ERROR: Cargo.toml not found at repository root ($GITHUB_WORKSPACE)." >&2
            exit 1
          fi
          LOWER=$(find . -type f -iname 'cargo.toml' ! -name 'Cargo.toml' || true)
          if [ -n "$LOWER" ]; then
            echo "ERROR: Found non-canonical manifest filenames (expected 'Cargo.toml'):" >&2
            echo "$LOWER" >&2
            exit 1
          fi
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler pkg-config libssl-dev
      - name: Linting
        run: cargo clippy --workspace --all-targets -- -D warnings

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate manifest casing and location
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          if [ ! -f Cargo.toml ]; then
            echo "ERROR: Cargo.toml not found at repository root ($GITHUB_WORKSPACE)." >&2
            exit 1
          fi
          LOWER=$(find . -type f -iname 'cargo.toml' ! -name 'Cargo.toml' || true)
          if [ -n "$LOWER" ]; then
            echo "ERROR: Found non-canonical manifest filenames (expected 'Cargo.toml'):" >&2
            echo "$LOWER" >&2
            exit 1
          fi
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler pkg-config libssl-dev
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Build workspace
        run: cargo build --workspace --all-targets
      - name: Run unit tests (libs & bins)
        run: |
          cargo test --workspace --lib --bins

  integration-tests:
    name: Integration tests (MongoDB + NATS)
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7
        ports: [ '27017:27017' ]
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
      nats:
        image: nats:latest
        ports: [ '4222:4222', '8222:8222' ]
    env:
      MONGODB_URL: mongodb://admin:password123@localhost:27017/?authSource=admin
      NATS_URL: nats://127.0.0.1:4222
      NATS_TEST_URL: nats://127.0.0.1:4222
      RUST_LOG: info
    steps:
      - uses: actions/checkout@v4
      - name: Validate manifest casing and location
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          if [ ! -f Cargo.toml ]; then
            echo "ERROR: Cargo.toml not found at repository root ($GITHUB_WORKSPACE)." >&2
            exit 1
          fi
          LOWER=$(find . -type f -iname 'cargo.toml' ! -name 'Cargo.toml' || true)
          if [ -n "$LOWER" ]; then
            echo "ERROR: Found non-canonical manifest filenames (expected 'Cargo.toml'):" >&2
            echo "$LOWER" >&2
            exit 1
          fi
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler pkg-config libssl-dev netcat-openbsd
          # Install mongosh for MongoDB connectivity testing
          wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if nc -z 127.0.0.1 27017; then echo "MongoDB is up"; exit 0; fi
            echo "Waiting for MongoDB..."; sleep 2;
          done
          echo "MongoDB did not start in time"; exit 1
      - name: Wait for NATS
        run: |
          for i in {1..30}; do
            if nc -z 127.0.0.1 4222; then echo "NATS is up"; exit 0; fi
            echo "Waiting for NATS..."; sleep 2;
          done
          echo "NATS did not start in time"; exit 1
      - name: Build workspace
        run: cargo build --workspace --all-targets
      - name: Test service NATS connectivity
        run: |
          echo "Testing NATS connectivity to services..."
          # Test basic NATS connection
          cargo run -p rust-inventory --bin inventory-client -- --help >/dev/null 2>&1 || echo "Inventory client build check passed"
          
          # Check NATS server status
          curl -s http://127.0.0.1:8222/connz | head -20 || echo "Could not get NATS connection info"
          
          # Wait a bit more for NATS subscriptions to be fully established
          sleep 5
          
          echo "Services should now be ready for integration tests"
      - name: Run integration tests
        run: |
          echo "Running integration tests synchronously to avoid NATS conflicts..."
          # Run integration tests with single thread to avoid NATS subject conflicts
          cargo test --workspace --tests -- --test-threads=1 --nocapture
      - name: Display test output on failure
        if: failure()
        run: |
          echo "Integration tests failed. Check the test output above for details."
          echo "Each test spawns its own service instance with a unique database."


  deploy-catalog:
    name: Deploy Catalog to Fly.io
    needs: [fmt, clippy, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Catalog service
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          cd scripts
          flyctl deploy .. -c catalog/fly.toml --remote-only --yes

  deploy-inventory:
    name: Deploy Inventory to Fly.io
    needs: [fmt, clippy, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Inventory service
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          cd scripts
          flyctl deploy .. -c inventory/fly.toml --remote-only --yes

  deploy-orders:
    name: Deploy Orders to Fly.io
    needs: [fmt, clippy, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Orders service
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          cd scripts
          flyctl deploy .. -c orders/fly.toml --remote-only --yes

  deploy-price:
    name: Deploy Price to Fly.io
    needs: [fmt, clippy, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Price service
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          cd scripts
          flyctl deploy .. -c price/fly.toml --remote-only --yes
